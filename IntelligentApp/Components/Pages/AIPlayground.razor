@page "/ai-playground"
@using IntelligentApp.Models
@using System.Text.Json
@using System.Text

<h3>AI Playground</h3>

<p>
    Tutaj możesz wpisać prompt tekstowy, który zostanie wysłany do OpenAI. Otrzymany tekst przeanalizujemy sentymentowo w Azure, a następnie wyświetlimy Ci wynik.
</p>

<div class="mb-3">
    <label for="promptInput" class="form-label">Prompt:</label>
    <textarea id="promptInput" class="form-control" @bind="_userPrompt" rows="3"></textarea>
</div>

<button class="btn btn-primary" @onclick="GenerateAndAnalyze" disabled="@_isLoading">
    Generuj i Analizuj
</button>

@if (_isLoading)
{
    <p class="mt-3">Przetwarzanie... proszę czekać.</p>
}
else if (_showResults)
{
    <div class="mt-3">
        <h4>Wynik OpenAI (Chat Completion):</h4>
        <p>@_generatedText</p>

        <h4>Analiza sentymentu (Azure Language):</h4>
        <p>Sentyment: @_sentimentResult</p>
    </div>
}

@code {
    private string _userPrompt = "";
    private bool _isLoading = false;
    private bool _showResults = false;
    private string _generatedText = "";
    private string _sentimentResult = "";

    [Inject]
    public IHttpClientFactory HttpFactory { get; set; }

    private async Task GenerateAndAnalyze()
    {
        if (string.IsNullOrWhiteSpace(_userPrompt))
            return;

        _isLoading = true;
        _showResults = false;
        _generatedText = "";
        _sentimentResult = "";

        try
        {
            _generatedText = await CallOpenAI(_userPrompt);
            _sentimentResult = await AnalyzeSentiment(_generatedText);
        }
        finally
        {
            _isLoading = false;
            _showResults = true;
        }
    }

    private async Task<string> CallOpenAI(string prompt)
    {
        var client = HttpFactory.CreateClient("OpenAI");

        var requestBody = new
        {
            model = "gpt-4",
            messages = new[]
            {
                new { role = "system", content = "Jeteś pomocnym asystentem." },
                new { role = "user", content = prompt }
            },
            max_tokens = 500
        };

        using var response = await client.PostAsJsonAsync("", requestBody);

        response.EnsureSuccessStatusCode();

        var jsonResponse = await response.Content.ReadFromJsonAsync<ChatCompletionResponse>();

        var answer = jsonResponse?.Choices?.FirstOrDefault()?.Message?.Content?.Trim();

        return answer;
    }

    private async Task<string> AnalyzeSentiment(string text)
    {
        var client = HttpFactory.CreateClient("AzureAI");

        var requestBody = new AnalyzeTextRequest
        {
            Kind = "SentimentAnalysis",
            AnalysisInput = new AnalysisInput
            {
                Documents = new List<AnalysisDocument>
                {
                    new AnalysisDocument
                    {
                        Id = "1",
                        Language = "pl",
                        Text = text
                    }
                }
            },
            Parameters = new Dictionary<string, object>
            {
                { "modelVersion", "latest" },
                { "loggingOptOut", false }
            }
        };

        var endpoint = "language/:analyze-text?api-version=2024-11-01";

        var response = await client.PostAsJsonAsync(endpoint, requestBody);
        response.EnsureSuccessStatusCode();

        var responseString = await response.Content.ReadAsStringAsync();

        var analyzeResponse = JsonSerializer.Deserialize<AnalyzeTextResponse>(responseString);

        var doc = analyzeResponse?.Results?.Documents?[0];
        return doc?.Sentiment ?? "unknown";
    }
}
