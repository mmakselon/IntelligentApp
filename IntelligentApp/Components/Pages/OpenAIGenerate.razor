@page "/openai-generate"
@using IntelligentApp.Models

<h3>Generowanie tekstu z GPT-4</h3>

<p>Wpisz poniżej prompt (pytanie lub polecenie), a następnie kliknij przycisk, aby wygenerować odpowiedź od GPT-4 (OpenAI).</p>

<div class="mb-3">
    <label class="mb-2">Wybierz prompt:</label>
    <select class="form-select" @onchange="OnPromptSelected">
        <option>-- Wybierz --</option>
        @foreach (var item in _availablePrompts)
        {
            <option value="@item">@item</option>
        }

    </select>
</div>

<div class="mb-3">
    <label for="promptInput" class="form-label">Prompt:</label>
    <textarea id="promptInput" class="form-control" rows="3" @bind="_userPrompt"></textarea>
</div>

<button class="btn btn-primary" @onclick="GenerateText">Generuj</button>

@if (_isLoading)
{
    <p class="mt-3">Generowanie odpowiedzi, proszę czekać...</p>
}
else if (!string.IsNullOrWhiteSpace(_generatedText))
{
    <div class="mt-3">
        <h4>Wynik:</h4>
        <p>@_generatedText</p>
    </div>
}

@code {
    private string _userPrompt = "";
    private bool _isLoading = false;
    private string _generatedText = "";
    private List<string> _availablePrompts = new List<string>();

    [Inject]
    public IHttpClientFactory HttpFactory { get; set; }

    [Inject]
    public IWebHostEnvironment Env { get; set; }

    protected override void OnInitialized()
    {
        var webRootPath = Env.WebRootPath;
        var csvPath = Path.Combine(webRootPath, "data", "prompts.csv");
        var lines = File.ReadAllLines(csvPath);

        for (int i = 1; i < lines.Length; i++)
        {
            var line = lines[i].Trim().Trim('"');

            if (!string.IsNullOrWhiteSpace(line))
            {
                _availablePrompts.Add(line);
            }
        }
    }

    private void OnPromptSelected(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selected))
        {
            _userPrompt = selected;
        }
    }

    private async Task GenerateText()
    {
        if (string.IsNullOrWhiteSpace(_userPrompt))
            return;

        _isLoading = true;
        _generatedText = "";

        _generatedText = await AskOpenAi(_userPrompt);

        _isLoading = false;
    }

    private async Task<string> AskOpenAi(string prompt)
    {
        try
        {
            var client = HttpFactory.CreateClient("OpenAI");

            var requestBody = new
            {
                model = "gpt-4",
                messages = new [] 
                {
                    new { role = "system", content = "Jesteś pomocnym asystentem." },
                    new { role = "user", content = prompt }
                },
                max_tokens = 500
            };

            using var response = await client.PostAsJsonAsync("", requestBody);

            if (!response.IsSuccessStatusCode)
            {
                return "Przepraszam, nie udało się uzyskać odpowiedzi od AI.";
            }

            var jsonResponse = await response.Content.ReadFromJsonAsync<ChatCompletionResponse>();

            var answer = jsonResponse?.Choices?.FirstOrDefault()?.Message?.Content?.Trim();

            return answer;
        }
        catch (Exception ex)
        {
            return $"Błąd: {ex.Message}";
        }
    }
}
